#! /bin/bash

# This script is intended to be sourced, not run
if [[ $0 == $BASH_SOURCE ]]
then
    echo "This file should be run as"
    echo "  source $0"
    echo "and should not be run as"
    echo "  sh $0"
fi

VACK_DIR=$(dirname $BASH_SOURCE)

aa () {
	ack --all "$@"
}

ac () {
	ack --code "$@"
}

ae () {
	ack --erl "$@"
}

ai () { 
    local sought=$1
	shift
    ack --pyt '(import.*'"$sought|$sought"'.*import)' "$@"
}

al () {
	ack --html "$@"
}

ap () {
	ack --python "$@"
}

at () {
	ack --pyt "$@"
}

av () {
	vack "$@"
}

aaa () {
	ack --nojunk "$@"
}

aav () {
	vack --all "$@"
}

acv () {
	vack --code "$@"
}

aev () {
	vack --erl "$@"
}

alv () {
	vack --html "$@"
}

apv () {
	vack --python "$@"
}

atv () {
	vack --pyt "$@"
}

awv () {
	vack -w "$@"
}

aiw () { 
    local sought=$1
    ack --pyt "(import.*\b$sought\b|\b$sought\b.import)"
}

ash () {
	ack --shell "$@"
}

ack () {
    python -c "print '\n\033[0;36m%s\033[0m\n' % ('#' * $(tput cols))"
    $(ACK=$(which ack) python $VACK_DIR/ack_vack.py "$@")
}

aack () {
    vack "$*" -v
}

aaav () {
	vack --nojunk "$@"
}

apnt () {
    ap --ignore-dir=test "$@"
}

vack () { 
	local python_script=$VACK_DIR/viack.py
	local bash_script=$VACK_DIR/viack.sh
	rm -f $bash_script
	trap "{ rm -f $bash_script ; exit 0; }" EXIT
	local python_options=-v
	[[ "$@" =~ -v ]] && python_options=
	if PYTHONPATH=$VACK_DIR python $python_script $python_options "$@" > $bash_script 2>&1
	then bash $bash_script
	else cat $bash_script
	fi
}

vvack () {
	vack --nojunk "$@"
}

vall () {
    vack --all "$@"
}

vap () {
    vack --python -v "$@"
}
